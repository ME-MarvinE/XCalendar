<?xml version="1.0" encoding="utf-8" ?>
<ContentView
    x:Class="XCalendar.Maui.Views.CalendarView"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:Converters="clr-namespace:XCalendar.Maui.Converters"
    xmlns:Models="clr-namespace:XCalendar.Core.Models;assembly=XCalendar.Core"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:xc="clr-namespace:XCalendar.Maui.Views"
    xmlns:xcInterfaces="clr-namespace:XCalendar.Core.Interfaces;assembly=XCalendar.Core"
    xmlns:mct="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
    x:Name="MainCalendarView"
    x:DataType="{x:Type xc:CalendarView}">

    <VerticalStackLayout Spacing="0">
        <VerticalStackLayout.Resources>
            <System:Boolean x:Key="TrueValue">True</System:Boolean>
            <System:Boolean x:Key="FalseValue">False</System:Boolean>
            
            <mct:IsNotEqualConverter x:Key="IsNotEqualConverter"/>

            <mct:MathExpressionConverter x:Key="MathExpressionConverter"/>

            <mct:MultiConverter x:Key="EnumToStringCharLimitConverter">
                <Converters:EnumToStringConverter/>
                <Converters:StringCharLimitConverter/>
            </mct:MultiConverter>

            <x:Array x:Key="DayNamesMultiConverterParams" Type="{x:Type mct:MultiConverterParameter}">
                <mct:MultiConverterParameter ConverterType="{x:Type Converters:StringCharLimitConverter}">
                    <mct:MultiConverterParameter.Value>
                        <x:Int32>3</x:Int32>
                    </mct:MultiConverterParameter.Value>
                </mct:MultiConverterParameter>
            </x:Array>
        </VerticalStackLayout.Resources>

        <!--#region Navigation-->
        <ContentView ControlTemplate="{Binding NavigationTemplate, Source={x:Reference MainCalendarView}}">
            <Grid HorizontalOptions="FillAndExpand"
                                  
                Padding="5"
                BackgroundColor="{Binding NavigationBackgroundColor, Source={x:Reference MainCalendarView}}"
                HeightRequest="{Binding NavigationHeightRequest, Source={x:Reference MainCalendarView}}">

                 <Frame HorizontalOptions="Start" HasShadow="False" BackgroundColor="{Binding NavigationArrowBackgroundColor, Source={x:Reference MainCalendarView}}"
                   Padding="0" CornerRadius="30">
                    <Label
                        Text="←"
                        TextColor="{Binding NavigationArrowColor, Source={x:Reference MainCalendarView}}"
                        VerticalTextAlignment="End"
                        FontAttributes="Bold"
                        FontSize="30"/>
                    <Frame.GestureRecognizers>
                        <TapGestureRecognizer Command="{Binding BackwardsArrowCommand, Source={x:Reference MainCalendarView}}" CommandParameter="{Binding BackwardsArrowCommandParameter, Source={x:Reference MainCalendarView}}"/>
                    </Frame.GestureRecognizers>
                </Frame>
                
               

                <Label
                    FontAttributes="Bold"
                    FontSize="18"
                    HorizontalOptions="CenterAndExpand"
                    HorizontalTextAlignment="Center"
                    Text="{Binding NavigatedDate, StringFormat='{0:MMMM yyy}', Source={x:Reference MainCalendarView}}"
                    TextColor="{Binding NavigationTextColor, Source={x:Reference MainCalendarView}}"
                    VerticalTextAlignment="Center"/>


                <Frame HasShadow="False" HorizontalOptions="End"  BackgroundColor="{Binding NavigationArrowBackgroundColor, Source={x:Reference MainCalendarView}}"
                   Padding="0" CornerRadius="30">
                    <Label
                         Text="→"
                        TextColor="{Binding NavigationArrowColor, Source={x:Reference MainCalendarView}}"
                        VerticalTextAlignment="End"
                        FontAttributes="Bold"
                        FontSize="30"/>
                    <Frame.GestureRecognizers>
                        <TapGestureRecognizer Command="{Binding ForwardsArrowCommand, Source={x:Reference MainCalendarView}}" CommandParameter="{Binding ForwardsArrowCommandParameter, Source={x:Reference MainCalendarView}}"/>
                    </Frame.GestureRecognizers>
                </Frame>
            </Grid>
        </ContentView>
        <!--#endregion-->

        <!--#region DayNames-->
        <ContentView ControlTemplate="{Binding DayNamesTemplate, Source={x:Reference MainCalendarView}}">
            <CollectionView
                x:Name="MainDaysOfWeekView"
                Margin="0,5,0,0"
                HeightRequest="{Binding DayNamesHeightRequest, Source={x:Reference MainCalendarView}}">

                <CollectionView.Style>
                    <Style TargetType="{x:Type CollectionView}">
                        <Setter Property="ItemTemplate">
                            <Setter.Value>
                                <DataTemplate x:DataType="{x:Type System:DayOfWeek}">
                                    <Label
                                        FontSize="15"
                                        HorizontalTextAlignment="Center"
                                        Text="{Binding ., Converter={StaticResource EnumToStringCharLimitConverter}, ConverterParameter={StaticResource DayNamesMultiConverterParams}}"
                                        TextColor="Black"/>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>

                        <Style.Triggers>
                            <DataTrigger
                                Binding="{Binding DayNameTemplate, Source={x:Reference MainCalendarView}, Converter={StaticResource IsNotEqualConverter}, ConverterParameter={x:Null}}"
                                TargetType="{x:Type CollectionView}"
                                Value="{StaticResource TrueValue}">
                                <Setter Property="ItemTemplate" Value="{Binding DayNameTemplate, Source={x:Reference MainCalendarView}}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </CollectionView.Style>

                <CollectionView.ItemsLayout>
                    <GridItemsLayout
                        HorizontalItemSpacing="{Binding DayNameHorizontalSpacing, Source={x:Reference MainCalendarView}}"
                        Orientation="Vertical"
                        Span="{Binding DaysOfWeek.Count, Source={x:Reference MainCalendarView}}"
                        VerticalItemSpacing="{Binding DayNameVerticalSpacing, Source={x:Reference MainCalendarView}}"/>
                </CollectionView.ItemsLayout>

            </CollectionView>
        </ContentView>
        <!--#endregion-->

        <!--#region MonthView-->
        <ContentView ControlTemplate="{Binding MonthViewTemplate, Source={x:Reference MainCalendarView}}">
            <CollectionView x:Name="MainMonthView" HeightRequest="{Binding MonthViewHeightRequest, Source={x:Reference MainCalendarView}}">
                <CollectionView.Style>
                    <Style TargetType="{x:Type CollectionView}">
                        <Setter Property="ItemTemplate">
                            <Setter.Value>
                                <DataTemplate x:DataType="{x:Type xcInterfaces:ICalendarDay}">
                                    <!--  Needs to be nested because collectionview doesn't respect margins  -->
                                    <ContentView>
                                        <xc:CalendarDayView
                                            Margin="2.5"
                                            DateTime="{Binding DateTime}"
                                            IsCurrentMonth="{Binding IsCurrentMonth}"
                                            IsToday="{Binding IsToday}"
                                            IsSelected="{Binding IsSelected}"
                                            IsInvalid="{Binding IsInvalid}"/>
                                    </ContentView>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>

                        <Style.Triggers>
                            <DataTrigger
                                Binding="{Binding DayTemplate, Source={x:Reference MainCalendarView}, Converter={StaticResource IsNotEqualConverter}, ConverterParameter={x:Null}}"
                                TargetType="{x:Type CollectionView}"
                                Value="{StaticResource TrueValue}">
                                <Setter Property="ItemTemplate" Value="{Binding DayTemplate, Source={x:Reference MainCalendarView}}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </CollectionView.Style>

                <CollectionView.ItemsLayout>
                    <GridItemsLayout Orientation="Vertical" Span="{Binding DaysOfWeek.Count, Source={x:Reference MainCalendarView}}"/>
                </CollectionView.ItemsLayout>

            </CollectionView>
        </ContentView>
        <!--#endregion-->

    </VerticalStackLayout>

</ContentView>